package main

import (
	"bytes"

	pgs "github.com/lyft/protoc-gen-star"
)

func (m *jaalModule) generateFileData(target pgs.File) (string, error) {
	buf := &bytes.Buffer{}

	go_package := m.GetGoPackage(target)
	buf.WriteString("// Code generated by protoc-gen-graphql. DO NOT EDIT.\n")
	buf.WriteString("package " + go_package + ";\n")

	initFunctionsName := make(map[string]bool)
	imports := m.GetImports(target)

	for key, _ := range imports {
		buf.WriteString("import \"" + key + "\";\n")
	}
	buf.WriteString("import \"context\";")
	buf.WriteString("import \"encoding/json\";")
	buf.WriteString("import \"encoding/base64\";")
	buf.WriteString("import \"go.appointy.com/jaal/gtypes\";")
	buf.WriteString("import \"go.appointy.com/jaal/schemabuilder\";")

	for _, enums := range target.AllEnums() { //enum type

		str, err := m.EnumType(enums, imports, initFunctionsName)

		if err != nil {
			return "", err
		}

		buf.WriteString(str + "\n")
	}

	PossibleReqObjects := make(map[string]bool)
	for _, service := range target.Services() {
		if err := m.getPossibleReqObjects(service, PossibleReqObjects); err != nil {
			return "", err
		}
	}

	for _, msgs := range target.AllMessages() { // union struct Type
		str, err := m.UnionStruct(msgs, imports, PossibleReqObjects, initFunctionsName)
		if err != nil {
			return "", err
		}
		buf.WriteString(str + "\n")
	}

	for _, msgs := range target.AllMessages() { // oneof Input Type
		str, err := m.OneofInputType(msgs, imports, initFunctionsName)
		if err != nil {
			return "", err
		}
		buf.WriteString(str + "\n")
	}

	for _, msgs := range target.AllMessages() { // oneof payload Type
		str, err := m.OneofPayloadType(msgs, imports, initFunctionsName)
		if err != nil {
			return "", err
		}
		buf.WriteString(str + "\n")
	}

	for _, msgs := range target.AllMessages() { // Input Type
		str, err := m.InputType(msgs, imports, PossibleReqObjects, initFunctionsName)
		if err != nil {
			return "", err
		}
		buf.WriteString(str + "\n")
	}

	for _, msgs := range target.AllMessages() { // payload type
		str, err := m.PayloadType(msgs, imports, initFunctionsName)
		if err != nil {
			return "", err
		}
		buf.WriteString(str + "\n")
	}

	for _, service := range target.Services() { // mutation input struct
		str, err := m.ServiceStructInput(service)
		if err != nil {
			return "", err
		}
		buf.WriteString(str + "\n")
	}

	for _, service := range target.Services() { // mutation output struct
		str, err := m.ServiceStructPayload(service)
		if err != nil {
			return "", err
		}
		buf.WriteString(str + "\n")
	}

	for _, service := range target.Services() { // mutation init input
		str, err := m.ServiceStructInputFunc(service, initFunctionsName)
		if err != nil {
			return "", err
		}
		buf.WriteString(str + "\n")
	}

	for _, service := range target.Services() { // mutation init payload
		str, err := m.ServiceStructPayloadFunc(service, initFunctionsName)
		if err != nil {
			return "", err
		}
		buf.WriteString(str + "\n")
	}

	for _, service := range target.Services() { // services
		str, err := m.ServiceInput(service)
		if err != nil {
			return "", err
		}
		buf.WriteString(str + "\n")
	}

	if str, err := m.InitFunc(initFunctionsName); err != nil { // init
		return "", err
	} else {
		buf.WriteString(str + "\n")
	}
	return buf.String(), nil
}
